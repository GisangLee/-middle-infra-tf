# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'build_infra'
on:
  workflow_dispatch:
    inputs:
      env:
        description: Environment
        type: choice
        required: true
        options:
          - prod
          - dev

permissions:
  contents: read

jobs:
  set_environment:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.set_environment.outputs.project_name }}
      project_env: ${{ steps.set_environment.outputs.project_env }}
    steps:
      - id: set_environment
        name: Set Environment
        run: |
          echo "project_name=$(echo "${{ github.repository }}" | sed "s|${{ github.repository_owner }}\/||g" | sed "s|-django||g")" >> $GITHUB_OUTPUT

  build_infra:
    name: 'build infra by terraform'
    runs-on: ubuntu-latest
    needs: [ set_environment ]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
        terraform init
        echo "** Running Terraform Init**"

    - name: Terraform Validate
      id: validate
      run: |
        terraform validate -no-color
        echo "** Running Terraform Validate**"

    # - name: Create Workspace
    #   run: |
    #     terraform workspace new ${{needs.set_environment.outputs.project_name}}-${{needs.set_environment.outputs.project_env}}-middle-infra
    #     terraform workspace select ${{needs.set_environment.outputs.project_name}}-${{needs.set_environment.outputs.project_env}}-middle-infra

    - name: Create WorkSpace
      uses: sarathkrish/terraform-workspace@v1.2   
      with:  
        workSpaceName: ${{needs.set_environment.outputs.project_name}}-${{needs.set_environment.outputs.project_env}}-middle-infra
        organizationName: "dude_tf_test"
        terraformToken: ${{secrets.TF_API_TOKEN}}
        terraformHost: 'app.terraform.io'

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -var env=${{needs.set_environment.outputs.project_env}} -var project_name=${{needs.set_environment.outputs.project_name}}

#       # On push to "main", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
# #       run: terraform apply -auto-approve -var input_var=${{env.INPUT_VAR}} -var project_name=${{ needs.set_environment.outputs.project_name }} -input=false
#       run: terraform apply -auto-approve -var env=${{ needs.set_environment.outputs.project_env }} -var project_name=${{ needs.set_environment.outputs.project_name }} -input=false
